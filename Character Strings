Question 1

#include <stdio.h>
#include <string.h>
void insertChar(char *str1, char *str2, char ch);
int main()
{
 char a[80],b[80];
 char ch, *p;

 printf("Enter a string: \n");
 fgets(a, 80, stdin);
 if (p=strchr(a,'\n')) *p = '\0';
 printf("Enter a character to be inserted: \n");
 ch = getchar();
 insertChar(a,b,ch);
 printf("insertChar(): ");
 puts(b);
 return 0;
}
void insertChar(char *str1, char *str2, char ch)
{
    int i , j = 0 , len_1 , count = 0;
    len_1 = strlen(str1);
    for(i = 0 ; i <= len_1; i++)
    {
        if(count < 3)
        {
            str2[j] = str1[i];
            j++;
            count++;
        }
        else
        {
            str2[j] = ch;
            j++;
            i--;
            count = 0;
        }
    }
}


Question 2
#include <stdio.h>
#include <string.h>

int locateFirstChar(char *str, char ch);
int main()
{
 char str[40], ch, *p;

 printf("Enter a string: \n");
 fgets(str, 80, stdin);
 if (p=strchr(str,'\n')) *p = '\0';
 printf("Enter the target character: \n");
 scanf("%c", &ch);
 printf("locateFirstChar(): %d\n", locateFirstChar(str, ch));
 return 0;
}
int locateFirstChar(char *str, char ch)
{
    int i, len_str;
    len_str = strlen(str);
    for (i = 0; i < len_str; i++)
    {
        if(str[i] == ch)
        {
            break;
        }
    }
    return i;
}

Question 12

#include <stdio.h>
#include <string.h>
#define INIT_VALUE -1 

int countSubstring(char str[], char substr[]);
int main()
{
 char str[80], substr[80], *p;
 int result=INIT_VALUE;

 printf("Enter the string: \n");
 fgets(str, 80, stdin);
 if (p=strchr(str,'\n')) *p = '\0';
 printf("Enter the substring: \n");
 fgets(substr, 80, stdin);
 if (p=strchr(substr,'\n')) *p = '\0';
 result = countSubstring(str, substr);
 printf("countSubstring(): %d\n", result);
 return 0;
}
int countSubstring(char str[], char substr[])
{
    int i , j , len_str , len_substr , count = 0, final = 0;
    len_str = strlen(str);
    len_substr = strlen(substr);
    for (i = 0; i < len_str;)
    {
        j = 0;
        while (str[i] == substr[j] && j < len_substr)
        {
            count++;
            i++;
            j++;
        }
        if (count == len_substr)
        {
            final++; 
            count = 0;
        }
        else
        {

            i = i - count;
            count = 0;
            i++;
        }
    }
    return final;
    
 }
